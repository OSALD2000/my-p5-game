import Matter from "matter-js";


const funnyComments = [
  "ุณููุงู\n ุงููุณููู",             
  "ุทุญููุช\n ุงููุชููุช",              // The connection joker
  "ุญููุฏ\n ูุณูุฑ",                 // Hammoud the drunk
  "ุจุฑุบุฑูุชุง",                   // Wordplay or nickname, likely humorous
  "ูููุฏุฑ\n ุงูุฑููุณ",             // Kuwider of Rafis (could be slang or nickname)
  "ุฑููุงู\n ุงูููุฏุฑุฏุฉ",           // Raiman the ruined
  "ุงูุฑูู \nูุจูุน ุงูุจูุชุจูู",       // States selling pitbulls (nonsense/sarcastic)
  "ูุฑููู\n ุงูุบุถุจ ๐ฅ",            // Anger has devoured you
  "ุบุฐููุฑ\n ุงูุจูุถุงูู",           // Ghadanfar the Whiteawi (nickname)
  "ุฃุจู \nุณุชูุดุฉ",                // Abu Sutmsha (made-up/funny name)
  "ุจูุฒููุง\n ุงูุฒุนููู", // I wished Zaalouk Gasoline won ๐
  "ุจุฑูุงุช\n ูููุง ",   // I wanted Barakat Cola to win
  "ูููููุงู\n ุงูููุณู",           // Wykham of the Mansaf (nonsense/funny)
];

const funny_arabic_names = [
  "ุณุนูุฏ\nุงููููุฎูุฉ", "ุฃุจู\nููุงูู ุงูุณุฑูุน", "ูุฑูู\nุงูุจูุถุงูู", "ุญุณู\nุงููุนูุฑููุฉ", "ุฎููู\nุฃุจู ุดุนุฑุฉ",
  "ูุงุฏู\nุงูููุณุง", "ุณุงูู\nุฃุจู ุดุงูุฑูุง", "ุฌูุงู\nุงูุฑุฒ ุงููููู", "ูุงุฒู\nุงูุจุงููุฉ", "ุฑุงูู\nููุชุฉ ุงูููุฑ",
  "ูููุงุฑ\nุงูุฒุนุชุฑ", "ูููุงูุฏููู\nุงูููุงูู", "ููุณู\nุงูููุงูุฉ", "ูุญูุฏ\nุตูุตุฉ", "ุจูุฒููุง\nุงูุฒุนููู",
  "ูุงูุงูุฏ\nุงููุดุงูู", "ุจูููุงู\nุงูููุณู", "ุฑููุงูุฏู\nุงูุดุงูุฑูุง", "ุฒูุฏุงู\nุงูุทุฑุดู", "ูุจุงุจู\nุงูููู",
  "ุฃุจู\nุฌุฑุฌูุฑ", "ุดูุฎ\nุงููุงุตูููุง", "ุฏุงูุด\nุฃุจู ุจูุฏูุฑุฉ", "ุนูู\nุณุทู ุงููุจู", "ุฃุจู\nูุญุท ุงูุนุฌูุจ",
  "ุณูุทุงู\nุงูุทุญูููุฉ", "ูุงูู\nุฎุฑูู ุงูุจุฑ", "ุชุฑูู\nุงูุฌุฒุฑุงูู", "ุญููุฏ\nุฃุจู ุนูุจุฉ", "ูุงุฌุฏ\nุจูุถุฉ ูุณูููุฉ",
  "ููุณู\nุงููุทูุฑุฉ", "ุชูููุฑ\nุงููุจุณุฉ", "ุนุงูุฑ\nุงูุนููุฉ", "ุฌุงุจุฑ\nุงูุจูุณูุงุท", "ููุซู\nุทุญูููุฉ",
  "ุฃุดุฑู\nุงููุจุงุจุฌู", "ุทูุงู\nุจูุชุฒุงูุฉ", "ูุฏูู\nุนุตูุฏุฉ", "ูุดุงู\nูุดุฑู", "ุนุงูุฑ\nุงูุญูุตู",
  "ุจุฑููู\nุงูุจุงุฐูุฌุงู", "ูุฑูู\nุงูุบุถุจ", "ุนุฒูุฒ\nุฑูุดุฉ", "ุฑุงูุงู\nุงููููู", "ูุงุณู\nุงูุนูุฑ",
  "ูุฎูู\nุงูุฌุจู", "ุณูุณู\nุงูุจุตูู", "ููุงู\nุงูุญุงุฑ", "ุฑุงุฆุฏ\nุงููุจุฑูุช", "ุฌุฑุฌูุฑ\nุงููุฌููู",
  "ุฃุจู\nูุต ูู", "ุดุญุงุทุฉ\nุงูููุฑ", "ุฃุจู\nุดูุจ ุงููุงุนู", "ุจุฑููู\nุงูููู", "ุจุทูุฎ\nุงูููุฒู",
  "ุฃุจู\nูุฑู ุงูุดุงู", "ูุนูู\nุงููุณููุฑู", "ุฑุงูู\nุฒูุชูู", "ุณููุงู\nุงูุจุทุงุทุณู", "ุจุฑูุงุช\nูููุง"
]


function generateFunnyArabicNames(n) {
  const firstParts = [
    "ุฃุจู", "ุดูุฎ", "ูุนูู", "ุณูุทุงู", "ูุงุจุชู", "ุฏูุชูุฑ", "ุจุงุดุง", "ุฒุนูู", "ุฃุณุชุงุฐ", "ุงูุญุงุฌ",
    "ุณุนูุฏ", "ูุฑูู", "ูุงุฒู", "ุฑุงุฆุฏ", "ูุงุฏู", "ูุดุงู", "ูุฏูู", "ุณุงูู", "ุทูุงู", "ุฃุดุฑู",
    "ุฑุงูู", "ุฌูุงู", "ุชุฑูู", "ุนุงูุฑ", "ูุงูู", "ุจุฑููู", "ุณูุณู", "ุฌุฑุฌูุฑ", "ูุฎูู", "ุจูุฒููุง",
    "ููุณู", "ูููุงุฑ", "ุฑููุงูุฏู", "ุฒูุฏุงู", "ูุจุงุจู", "ูุงูุงูุฏ", "ุจูููุงู", "ูููุงูุฏููู", "ูุญูุฏ", "ุนูู"
  ];

  const secondParts = [
    "ุงููููุฎูุฉ", "ุงูููุงูู", "ุงูุญูุต", "ุงููุดุฑู", "ุงูููุงูุฉ", "ุงูุดุงูุฑูุง", "ุงูุฑุฒ ุงููููู", "ุงูุฒุนููู",
    "ุงููุดุงูู", "ุงูููุณู", "ุงูุทุฑุดู", "ุงูุจุงููุฉ", "ุงูููุณุง", "ุงููุทูุฑุฉ", "ุงููุจุณุฉ", "ุงูุนููุฉ",
    "ุทุญูููุฉ", "ุงููุจุงุจุฌู", "ุจูุชุฒุงูุฉ", "ุนุตูุฏุฉ", "ุงูุญูุตู", "ุงูุจุงุฐูุฌุงู", "ุงูุบุถุจ", "ุฑูุดุฉ",
    "ุงููููู", "ุงูุนูุฑ", "ุงูุฌุจู", "ุงูุจุตูู", "ุงูุญุงุฑ", "ุงููุจุฑูุช", "ุงููุฌููู", "ูุต ูู",
    "ุงูููุฑ", "ุดูุจ ุงููุงุนู", "ุงูููู", "ุงูููุฒู", "ูุฑู ุงูุดุงู", "ุงููุณููุฑู", "ุฒูุชูู", "ุงูุจุทุงุทุณู", "ูููุง", "ุงูุจูุถุงูู"
  ];

  const names = [];
  for (let i = 0; i < n; i++) {
    const first = firstParts[Math.floor(Math.random() * firstParts.length)];
    const second = secondParts[Math.floor(Math.random() * secondParts.length)];
    names.push(`${first}\n${second}`);
  }
  return names;
}





export default (p, options = {}) => {
  const Engine = Matter.Engine;
  const World = Matter.World;
  const Bodies = Matter.Bodies;
  const Body = Matter.Body;

  var Ball = function(bodies, color, name, velocity_vector = { x: p.random(-5, 5), y: p.random(-5, 5) }) {
      this.bodies = bodies;
      this.color = color;
      this.name = name;
      Matter.Body.setVelocity(this.bodies, velocity_vector);
  }

  Ball.prototype.winCheck = function(finishY, ballRadius, winner) {
    return !winner && this.bodies.position.y >= finishY - ballRadius;
  }

  let engine;
  let world;

  let obstacles = [];
  let balls = [];
  let canvasHeight = 900;
  let canvasWidth = 600;
  let scrollOffset = 0;
  let winner = null;

  const ballRadius = 15;

  p.setup = () => {
    p.createCanvas(canvasWidth, canvasHeight);
    engine = Engine.create();
    world = engine.world;
    engine.gravity.y = 0.8;


    const wallThickness = 50;
    const bounds = [
      Bodies.rectangle(200, -wallThickness / 2, canvasWidth, wallThickness, { isStatic: true }),
      Bodies.rectangle(200, 10000 + wallThickness / 2, canvasWidth, wallThickness, { isStatic: true }),
      Bodies.rectangle(-wallThickness / 2, 3000, wallThickness, 10000, { isStatic: true }),
      Bodies.rectangle(canvasWidth + wallThickness / 2, 3000, wallThickness, 10000, { isStatic: true }),
    ];
    World.add(world, bounds);

    //createBalls(["ูุญูุฏ \n ูุฑุนุฉ", "ุบุงุจุฑูู", "ูููุงู", "ููุฑู", "ูุงูู","ุฎุงูุฏ \n ุฎุฑูุทุฉ", "ูุฑุณุชูุงู  \nุดุงูุฑ", "ูููุงูุฏูุณูู\n ุงูุงุญูุฑ", "ููุฑุบู"], "ูุญูุฏ \n ูุฑุนุฉ");
    //createBalls(generateFunnyArabicNames(150));
    createBalls(["ุนูู\n ุฎุฑูุทุฉ", "ูุงุฑุง\n ุฎุฑูุทุฉ"]);
    generateObstacles();
    
    balls.forEach(ball => World.add(world, ball.bodies))
  };

  function createBalls(names, favored)
  {
      names.forEach((n, i) =>{
        const isFavored = n.includes(favored);
        balls.push(new Ball(
          Bodies.circle(250 + p.random(-100, 100), 50 + i * 5, ballRadius, { restitution: isFavored ? 0.4 : 0.5, friction: isFavored ? 0.010 : 0.018, frictionAir: isFavored ? 0.00001 : 0.0001 }),
          getRandomColor(),
          n,
          isFavored 
          ? { x: p.random(-5, 10), y: p.random(5, 10) }
          : { x: p.random(-5, 5), y: p.random(-5, 5) }
        ));
      })
    }

  function generateObstacles() {
    for (let i = 1; i < 33; i++) {
      const y = i * 240;
      const angle = p.random(0.3, 0.4);
      const gapWidth = 75;
      const totalWidth = canvasWidth;
      const gapX = p.random(20, 400 - gapWidth);

      const leftWidth = gapX;
      const rightWidth = totalWidth - gapX - gapWidth;

      const leftObstacle = Bodies.rectangle(leftWidth / 2, y, leftWidth, 10, {
        isStatic: true,
        angle: angle,
      });

      const rightObstacle = Bodies.rectangle(gapX + gapWidth + rightWidth / 2, y, rightWidth, 10, {
        isStatic: true,
        angle: -angle,
      });

      obstacles.push(leftObstacle, rightObstacle);
      World.add(world, [leftObstacle, rightObstacle]);
    }
  }

  function getRandomColor() {
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return [r, g, b];
  }

  p.draw = () => {
    Engine.update(engine);

    p.background(2);

    const leadingBall = balls.reduce((max, ball) => 
      ball.bodies.position.y > max.bodies.position.y ? ball : max, balls[0])
    const leadingBallY = leadingBall.bodies.position.y;

    scrollOffset = leadingBallY - p.height / 2;
    scrollOffset = p.max(0, scrollOffset);

    p.push();
    p.translate(0, -scrollOffset);

    p.fill(150);
    for (let obs of obstacles) {
      p.push();
      p.translate(obs.position.x, obs.position.y);
      p.rotate(obs.angle);
      p.rectMode(p.CENTER);
      p.rect(0, 0, obs.bounds.max.x - obs.bounds.min.x, 10);
      p.pop();
    }

    balls.forEach(ball => drawBall(ball.bodies, ball.color, ball.name))

    const finishY = 8000;
    p.stroke(0, 255, 0);
    p.strokeWeight(4);
    p.line(0, finishY, p.width, finishY);

    const w = balls.find(ball => ball.winCheck(finishY, ballRadius, winner));
    
    if (w){
      winner = w.name;
    }

    if (winner) {
      p.fill(255);
      p.textSize(32);
      p.textAlign(p.CENTER);
      p.text(`${winner} wins!`, p.width / 2, scrollOffset + 100);
      Matter.World.clear(world);
      Matter.Engine.clear(engine);
      p.noLoop();
    }

    p.pop();
  };

  function drawBall(ball, color, name) {
    p.fill(...color);
    p.noStroke();
    p.ellipse(ball.position.x, ball.position.y, ballRadius * 2);
    p.textAlign(p.CENTER, p.CENTER);
    p.textStyle(p.BOLD);
    p.textSize(20);
    p.stroke(0);
    p.strokeWeight(3);
    p.fill(255);
    p.text(name, ball.position.x, ball.position.y);
    p.noStroke();
    p.fill(255);
    p.text(name, ball.position.x, ball.position.y);
  }
};